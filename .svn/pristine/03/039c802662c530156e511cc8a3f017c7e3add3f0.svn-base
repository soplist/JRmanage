package com.bureau.action;


import java.io.IOException;
import java.io.OutputStream;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import com.bureau.biz.CarrecordBiz;
import com.bureau.biz.PricarrecordBiz;
import com.bureau.pojo.Carrecord;
import com.bureau.pojo.Lunch;
import com.bureau.pojo.PageData;
import com.bureau.pojo.Pricarrecord;
import com.bureau.pojo.TempJson;
import com.bureau.unit.Quarter;
import com.bureau.unit.SysConst;
import com.opensymphony.xwork2.ModelDriven;

public class PricarrecordAction extends BaseAction implements ModelDriven<Pricarrecord>{
	private Pricarrecord ca;
	public Pricarrecord getCa() {
		return ca;
	}

	public void setCa(Pricarrecord ca) {
		this.ca = ca;
	}

	public Pricarrecord getModel() {
		if(ca==null){
			ca=new Pricarrecord();
		}
		return ca;
	}
	//接收前台参数
	private String idStart;
	public void setIdStart(String idStart) {
		this.idStart = idStart;
	}
	public String getIdStart() {
		return idStart;
	}
	private String idEnd;
	public void setIdEnd(String idEnd) {
		this.idEnd = idEnd;
	}
	public String getIdEnd() {
		return idEnd;
	}
	//注入BIZ
	private PricarrecordBiz pricarrecordBiz;
	
	public void setPricarrecordBiz(PricarrecordBiz pricarrecordBiz) {
		this.pricarrecordBiz = pricarrecordBiz;
	}
	private static PageData<Pricarrecord> tos=null;
	//列表展示
	public void list(){
		tos = pricarrecordBiz.findAll(ca,idStart,idEnd);	
		this.writeJSON(tos);
	}
	public void findBytime(){
		List<Pricarrecord> list = pricarrecordBiz.findBytime(ca.getCarid(),idStart, idEnd);
		System.out.println(idEnd+idStart);
		this.writeJSON(list);
	}
	//增加
	public void add(){
		TempJson tj=new TempJson();
		tj.setMessage(SysConst.ADDFAIL);
		String nowTime = Quarter.getNowTime();
		ca.setCreatetime(nowTime);
  		boolean res = pricarrecordBiz.add(ca);
		if(res){
			tj.setMessage(SysConst.ADDSUCCESS);
			tj.setSuccess(true);
		}
		this.writeJSON(tj);
	}
	//修改
	public void updata(){
		TempJson tj=new TempJson();
		tj.setMessage(SysConst.UPDFAIL);
		String nowTime = Quarter.getNowTime();
		ca.setCreatetime(nowTime);
		boolean res=pricarrecordBiz.upd(ca);
		if(res){
			tj.setMessage(SysConst.UPDSUCCESS);
			tj.setSuccess(true);
		}
		this.writeJSON(tj);
	}
	//删除
	public void del(){
		TempJson tj=new TempJson();
		tj.setMessage(SysConst.DELFAIL);
		boolean res = pricarrecordBiz.del(ca);
		if(res){
			tj.setMessage(SysConst.DELSUCCESS);
			tj.setSuccess(true);
		}
		this.writeJSON(tj);
	}
	//根据id查询
	public void findById(){
		ca=pricarrecordBiz.findById(ca.getId());
		this.writeJSON(ca);
	}
	//按时间统计报餐人数总数
	public void sumByKm(){
		int sum = 0;
		if(tos != null){
			for(int i = 0;i < tos.getTotal();i++){
				sum += tos.getRows().get(i).getKm();
			}
		}
		this.writeJSON(sum);
	}
	//实现导出列表功能
	public void exportExcel() throws IOException{
		HSSFWorkbook wb=null;
		try{
			wb = pricarrecordBiz.export(tos);
			response.reset();//清除缓冲中的数据
			response.setContentType("application/vnd.ms-excel;charset=utf-8");  
			response.setHeader("Content-disposition", "attachment;filename=export.xls");
			response.flushBuffer();//将缓冲区中的所有数据发送到客户端
			OutputStream ouputStream = response.getOutputStream();  
			wb.write(ouputStream);  
			ouputStream.flush();  
			ouputStream.close();
		}catch(IOException e){
			e.printStackTrace();
		}
	}
}
