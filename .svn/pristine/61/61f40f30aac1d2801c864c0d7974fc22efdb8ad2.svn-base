package com.bureau.action;

import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import com.bureau.biz.CheckepcarBiz;
import com.bureau.biz.LogBiz;
import com.bureau.pojo.Checkepcar;
import com.bureau.pojo.CheckepcarVo;
import com.bureau.pojo.Log;
import com.bureau.pojo.PageData;
import com.bureau.pojo.QUser;
import com.bureau.pojo.TempJson;
import com.bureau.unit.Quarter;
import com.bureau.unit.SysConst;
import com.opensymphony.xwork2.ModelDriven;

/** 
 * @author 作者 E-mail: 
 * @version 创建时间：2018-8-13 上午10:42:29 
 * 类说明 
 */
public class CheckepcarAction extends BaseAction implements ModelDriven<Checkepcar>  {
	private Checkepcar cc;
	private CheckepcarBiz ccBiz;
	
	private static List<CheckepcarVo> ccvlist = null;
	
	//接收前台参数
	private String idStart;
	private String idEnd;
	public void setIdStart(String idStart) {
		this.idStart = idStart;
	}
	public String getIdStart() {
		return idStart;
	}
	public void setIdEnd(String idEnd) {
		this.idEnd = idEnd;
	}
	public String getIdEnd() {
		return idEnd;
	}
    
	public Checkepcar getCc() {
		return cc;
	}
    public void setCc(Checkepcar cc) {
		this.cc = cc;
	}
    public void setCcBiz(CheckepcarBiz ccBiz) {
		this.ccBiz = ccBiz;
	}

	public Checkepcar getModel() {
		if (cc == null) {
			cc = new Checkepcar();
		}
		return cc;
	}
	//注入logBiz
	private LogBiz logBiz;
	public void setLogBiz(LogBiz logBiz) {
		this.logBiz = logBiz;
	}
	
	
	
	
	public void findByCarnumber(){
		PageData<CheckepcarVo> pd = new PageData<CheckepcarVo>();
		try{
		    pd = ccBiz.findByCarnumber(cc);
		    this.writeJSON(pd,new String[]{"persionfile","style"});
		}catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	public void findAll(){
		PageData<CheckepcarVo> pd = new PageData<CheckepcarVo>();
		try{
		    pd = ccBiz.findAll(idStart,idEnd,cc);
		    this.writeJSON(pd,new String[]{"persionfile","style","privatecar"});
		}catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	public void findBytime(){
		try{
			ccvlist = ccBiz.findBytime(idStart,idEnd,cc);
		    this.writeJSON(ccvlist,new String[]{"persionfile","style","privatecar"});
		}catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	public void add() throws UnsupportedEncodingException{
		TempJson tj=new TempJson();
		tj.setMessage(SysConst.ADDFAIL);
		boolean res = false;	
		cc.setCreatetime(Quarter.getNowTime());
		cc.setStatus(1);
		res = ccBiz.add(cc);
		if(res){
			tj.setMessage(SysConst.ADDSUCCESS);
			tj.setSuccess(true);
		}
		this.writeJSON(tj);
	}
	
	public void del(){
		try{
		    TempJson tj=new TempJson();
		    tj.setMessage(SysConst.DELFAIL);
		    
		    cc = ccBiz.findById(cc.getId());
		    
		    boolean res = ccBiz.del(cc);
		
		    if(res){
			    tj.setMessage(SysConst.DELSUCCESS);
			    tj.setSuccess(true);
		    }
		  //写入日志
			if(res){
				//存入日志
				QUser us = (QUser) session.get("login_users");
				Log log = new Log();
				log.setTitle("删除维修车辆记录");
				log.setPeople(us.getLname());
				//时间
				Date day=new Date();    
				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
				log.setCreatetime(df.format(day));
				log.setIsfinish(1);
				logBiz.addLog(log);	
			}
		    this.writeJSON(tj);
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	
	public void maintainUpdate(){
		TempJson tj=new TempJson();
		
		Checkepcar c = ccBiz.findById(cc.getId());
		
		c.setPeople(cc.getPeople());
		c.setCheckdate(cc.getCheckdate());
		c.setResult(cc.getResult());
		
		boolean result = ccBiz.maintainUpdate(c);
		if(result){
			tj.setMessage(SysConst.UPDSUCCESS);
			tj.setSuccess(true);
		}else{
			tj.setMessage(SysConst.UPDFAIL);
		}
		this.writeJSON(tj);
	}
	
	public void returnvisitUpdate(){
		TempJson tj=new TempJson();
		
		Checkepcar c = ccBiz.findById(cc.getId());
		
		c.setMan(cc.getMan());
		c.setCalldate(cc.getCalldate());
		c.setCallbrief(cc.getCallbrief());
		
		boolean result = ccBiz.returnvisitUpdate(c);
		if(result){
			tj.setMessage(SysConst.UPDSUCCESS);
			tj.setSuccess(true);
		}else{
			tj.setMessage(SysConst.UPDFAIL);
		}
		this.writeJSON(tj);
	}
	
	//实现导出列表功能
	public void exportExcel() throws IOException{
		HSSFWorkbook wb=null;
		try{
			wb = ccBiz.export(ccvlist);
			response.reset();//清除缓冲中的数据
			response.setContentType("application/vnd.ms-excel;charset=utf-8");  
			response.setHeader("Content-disposition", "attachment;filename=export.xls");
			response.flushBuffer();//将缓冲区中的所有数据发送到客户端
			OutputStream ouputStream = response.getOutputStream();  
			wb.write(ouputStream);  
			ouputStream.flush();  
			ouputStream.close();
		}catch(IOException e){
			e.printStackTrace();
		}
	}
}
