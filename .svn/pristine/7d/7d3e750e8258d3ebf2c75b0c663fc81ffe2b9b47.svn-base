package com.bureau.biz.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Font;

import com.bureau.biz.ChangeequipmentBiz;
import com.bureau.dao.ChangeequipmentDao;
import com.bureau.pojo.Changeequipment;
import com.bureau.pojo.ChangeequipmentVo;
import com.bureau.pojo.Checkepcar;
import com.bureau.pojo.CheckepcarVo;
import com.bureau.pojo.Customer;
import com.bureau.pojo.Dictionary;
import com.bureau.pojo.Notice;
import com.bureau.pojo.PageData;
import com.bureau.pojo.Personfile;

/** 
 * @author 作者 E-mail: 
 * @version 创建时间：2018-8-17 上午9:15:42 
 * 类说明 
 */
public class ChangeequipmentBizImpl implements ChangeequipmentBiz {
	private ChangeequipmentDao ceDao;

	public void setCeDao(ChangeequipmentDao ceDao) {
		this.ceDao = ceDao;
	}

	public PageData<ChangeequipmentVo> findAll(String idStart, String idEnd,Changeequipment ce) {
		String hql="from Changeequipment c ";
		String counthql="select count(c.id) from Changeequipment c";
		Map<String, Object> params=new HashMap<String, Object>();
		
		if(ce.getCarnumber()!=null ||!isEmptyOrNull(idStart) || !isEmptyOrNull(idEnd)){
			if(ce.getCarnumber()!=null && idStart.isEmpty() && idEnd.isEmpty()){
				hql += " where c.carnumber like :carnumber";
				counthql += " where c.carnumber like :carnumber";
				params.put("carnumber", "%"+ce.getCarnumber()+"%");
			}
			else if(ce.getCarnumber()==null && idStart !=null && idEnd != null){
				hql+=" where c.createtime between :a and :b";
				counthql += " where c.createtime between :a and :b";
				params.put("a", idStart);
				params.put("b", idEnd);
			}
			else if(ce.getCarnumber()!=null && !idStart.isEmpty() && !idEnd.isEmpty()){
				hql+=" where c.carnumber like :carnumber and c.createtime between :a and :b";
				counthql += " where c.carnumber like :carnumber and c.createtime between :a and :b";
				params.put("carnumber", "%"+ce.getCarnumber()+"%");
				params.put("a", idStart);
				params.put("b", idEnd);
			}
		}
		hql+="  order by c.id desc";
		
		List<Changeequipment> ces = ceDao.list(hql, params,
				(ce.getPage()-1)*ce.getRows(),ce.getRows());
		PageData<ChangeequipmentVo> pd = new PageData<ChangeequipmentVo>();
		Integer total = ceDao.count(counthql, params);
		pd.setRows(addEmptyPeople(ces));
		pd.setTotal(total);
		return pd;
	}
	
	public List<ChangeequipmentVo> findBytime(String idStart, String idEnd,Changeequipment ce) {
		String hql="from Changeequipment c";
		Map<String, Object> params=new HashMap<String, Object>();
		if(ce.getCarnumber()!=null && idStart.isEmpty() && idEnd.isEmpty()){
			hql += " where c.carnumber like :carnumber";
			params.put("carnumber", "%"+ce.getCarnumber()+"%");
		}
		else if(ce.getCarnumber()==null && idStart !=null && idEnd != null){
			hql+=" where c.createtime between :a and :b";
			params.put("a", idStart);
			params.put("b", idEnd);
		}
		else if(ce.getCarnumber()!=null && !idStart.isEmpty() && !idEnd.isEmpty()){
			hql+=" where c.carnumber like :carnumber and c.createtime between :a and :b";
			params.put("carnumber", "%"+ce.getCarnumber()+"%");
			params.put("a", idStart);
			params.put("b", idEnd);
		}
		
		List<Changeequipment> ces = ceDao.list(hql, params);
		List<ChangeequipmentVo> cevs = addEmptyPeople(ces);
		return cevs;
	}
	
	private boolean isEmptyOrNull(String value){
		if(value==null){
			return true;
		}
		else{
			if(value.isEmpty()){
				return true;
			}
			else{
			    return false;
			}
		}
	}
	
	public List<ChangeequipmentVo> addEmptyPeople(List<Changeequipment> ces){
		List<ChangeequipmentVo> volist = new ArrayList<ChangeequipmentVo>();
		for(Changeequipment ce : ces){
			ChangeequipmentVo vo = new ChangeequipmentVo();
			
			vo.setId(ce.getId());
			vo.setCustomer(ce.getCustomer());
			vo.setCarnumber(ce.getCarnumber());
			vo.setColor(ce.getColor());
			vo.setPhone(ce.getPhone());
			vo.setSim(ce.getSim());
			vo.setTerminal(ce.getTerminal());
			vo.setPeople(ce.getPeople());
			vo.setChangedate(ce.getChangedate());
			vo.setCartype(ce.getCartype());
			vo.setNumber(ce.getNumber());
			vo.setRegisterdate(ce.getRegisterdate());
			vo.setEndpay(ce.getEndpay());
			vo.setRemark(ce.getRemark());
			vo.setCreatetime(ce.getCreatetime());
			
			volist.add(vo);
		}
		for(ChangeequipmentVo cev : volist){
			if(cev.getPeople()==null){
				cev.setPeople(new Personfile());
			}
			if(cev.getCustomer()==null){
				cev.setCustomer(new Customer());
			}
			if(cev.getCartype()==null){
				cev.setCartype(new Dictionary());
			}
			//ccv.setCustomer(new Customer());
		}
		return volist;
	}

	public boolean add(Changeequipment ce) {
		return ceDao.add(ce);
	}
	
	//delete
	public boolean del(Changeequipment ce) {
		return ceDao.del(ce);
	}
	
	public Changeequipment findById(Integer id) {
		return ceDao.get(id);
	}
	
	//update
	public boolean update(Changeequipment ce) {
		String hql="update Changeequipment c set c.customer.id=:customerid,c.carnumber=:carnumber,c.color=:color,c.phone=:phone,c.sim=:sim,c.terminal=:terminal,c.people.id=:peopleid,c.changedate=:changedate,c.cartype.id=:cartypeid,c.number=:number,c.registerdate=:registerdate,c.endpay=:endpay,c.remark=:remark where c.id=:id";
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("id",ce.getId());
		params.put("customerid",ce.getCustomer().getId());
		params.put("carnumber",ce.getCarnumber());
		params.put("color",ce.getColor());
		params.put("phone",ce.getPhone());
		params.put("sim",ce.getSim());
		params.put("terminal",ce.getTerminal());
		params.put("peopleid",ce.getPeople().getId());
		params.put("changedate",ce.getChangedate());
		params.put("cartypeid",ce.getCartype().getId());
		params.put("number",ce.getNumber());
		params.put("registerdate",ce.getRegisterdate());
		params.put("endpay",ce.getEndpay());
		params.put("remark",ce.getRemark());
		if(ceDao.execute(hql, params)>-1){
		    return true;
		}else{
		    return false;
		}
	}
	
	public HSSFWorkbook export(List<ChangeequipmentVo> list) {
		String[] excelHeader = {"编号", "所属公司","车牌号码","车辆颜色","联系电话", "SIM卡号", "终端型号/终端品牌","安装人 ","换装日期","车辆类型","安装单编号","登记日期","结款","备注"};
		HSSFWorkbook wb = new HSSFWorkbook();  
        HSSFSheet sheet = wb.createSheet("换装车辆记录表");
        
        HSSFRow row = sheet.createRow((int) 0);  
        row.setHeightInPoints(12F);
        HSSFCellStyle style = wb.createCellStyle();  
        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 指定单元格居中对齐
        //style.setFillPattern(HSSFCellStyle.FINE_DOTS);// 设置列的样式
        style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);// 垂直居中
        
        // 设置字体样式  
        Font titleFont = wb.createFont();  
        titleFont.setFontHeightInPoints((short)12);// 字体高度  
        titleFont.setFontName("黑体");// 字体样式  
        style.setFont(titleFont);
        //表头
        for (int i = 0; i < excelHeader.length; i++) {
            HSSFCell cell = row.createCell(i);  
            cell.setCellValue(excelHeader[i]);  
            cell.setCellStyle(style);  
            sheet.autoSizeColumn(i);// 设置宽度 
        }
        //表体内容
        fillExcelValue(sheet,row,list);
		return wb;
		
	}
	
	private void fillExcelValue(HSSFSheet sheet,HSSFRow row,List<ChangeequipmentVo> list){
		for (int i = 0; i <list.size(); i++) {  
       	 row = sheet.createRow(i + 1); 	 
       	 row.createCell(0).setCellValue(list.get(i).getId());//编号
   		 row.createCell(1).setCellValue(list.get(i).getCustomer().getName());//所属公司
   		 row.createCell(2).setCellValue(list.get(i).getCarnumber());//车牌号码
   		 row.createCell(3).setCellValue(list.get(i).getColor());//车辆颜色
   		 row.createCell(4).setCellValue(list.get(i).getPhone());//联系电话
   		 row.createCell(5).setCellValue(list.get(i).getSim());//SIM卡号
   		 row.createCell(6).setCellValue(list.get(i).getTerminal());//终端型号/终端品牌
   		 row.createCell(7).setCellValue(list.get(i).getPeople().getName());//安装人
   		 row.createCell(8).setCellValue(list.get(i).getChangedate());//换装日期
   		 row.createCell(9).setCellValue(list.get(i).getCartype().getText());//车辆类型
   		 row.createCell(10).setCellValue(list.get(i).getNumber());//安装单编号
   		 row.createCell(11).setCellValue(list.get(i).getRegisterdate());//登记日期
   		 row.createCell(12).setCellValue(list.get(i).getEndpay());//结款
   		 row.createCell(13).setCellValue(list.get(i).getRemark());//备注
   	   }
	}
	
	//按车辆类型统计(换装)车辆数量      by-李金2018-8-20
	public Integer findAllSum(Integer carstyle,String idStart, String idEnd){
		String counthql="select count(c.id) from Changeequipment c where c.cartype.id=:carstyle and c.changedate between :a and :b order by c.id desc";		
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("carstyle", carstyle);
		params.put("a", idStart);
		params.put("b", idEnd);
		//查询记录条数
		Integer total = ceDao.count(counthql, params);
		return total;
	}
}
