package com.bureau.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.IOUtils;
import org.apache.struts2.ServletActionContext;

import Decoder.BASE64Encoder;

import com.bureau.biz.DictionaryBiz;
import com.bureau.biz.DocumentBiz;
import com.bureau.biz.UserBiz;
import com.bureau.pojo.Dictionary;
import com.bureau.pojo.Document;
import com.bureau.pojo.Notice;
import com.bureau.pojo.PageData;
import com.bureau.pojo.QUser;
import com.bureau.pojo.TempJson;
import com.bureau.unit.Quarter;
import com.bureau.unit.SysConst;
import com.opensymphony.xwork2.ModelDriven;

/** 
 * @author 作者 E-mail: 
 * @version 创建时间：2018-8-8 下午3:03:28 
 * 类说明 
 */
public class DocumentAction extends BaseAction implements ModelDriven<Document>  {
    private Document dcm;
    private DocumentBiz documentBiz;
    private DictionaryBiz dicBiz;
    
    private File document;
    private String documentContextType;
	private String documentFileName;
	private String fileName;
	InputStream fileInputStream;
	OutputStream out;
	
	private UserBiz userBiz;
	
    public File getDocument() {
		return document;
	}
	public void setDocument(File document) {
		this.document = document;
	}
	public String getDocumentContextType() {
		return documentContextType;
	}
	public void setDocumentContextType(String documentContextType) {
		this.documentContextType = documentContextType;
	}
	public String getDocumentFileName() {
		return documentFileName;
	}
	public void setDocumentFileName(String documentFileName) {
		this.documentFileName = documentFileName;
	}
	public String getFileName() {
		return fileName;
	}
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	public InputStream getFileInputStream() {
		return fileInputStream;
	}
	public void setFileInputStream(InputStream fileInputStream) {
		this.fileInputStream = fileInputStream;
	}
	public OutputStream getOut() {
		return out;
	}
	public void setOut(OutputStream out) {
		this.out = out;
	}
	
	public void setUserBiz(UserBiz userBiz) {
		this.userBiz = userBiz;
	}

	public void setDicBiz(DictionaryBiz dicBiz) {
		this.dicBiz = dicBiz;
	}
	public void setDocumentBiz(DocumentBiz documentBiz) {
		this.documentBiz = documentBiz;
	}
	public Document getDcm() {
		return dcm;
	}
	public void setDcm(Document dcm) {
		this.dcm = dcm;
	}
	public Document getModel() {
		// TODO Auto-generated method stub
		if (dcm == null) {
			dcm = new Document();
		}
		return dcm;
	}

	public void findAll(){
		PageData<Document> pd = new PageData<Document>();
		pd = documentBiz.findAll(dcm);
		this.writeJSON(pd);
	}
	
	public void findstyleList(){
		List<Dictionary> styles=dicBiz.findDictionaryByName("文件类型");
		this.writeJSON(styles);
	}
	
	public void findtypeList(){
		List<Dictionary> styles=dicBiz.findDictionaryByName("收发类型");
		this.writeJSON(styles);
	}
	
	private static String getFileCode(String fileName){
		String  extension=fileName.substring(fileName.lastIndexOf("."), fileName.length());
		//获得时间代码
		DateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
        String code = df.format(new Date(System.currentTimeMillis()));
        return code+extension;
	}
	
	//增加公文
	public void add() throws UnsupportedEncodingException{
		TempJson tj=new TempJson();
		tj.setMessage(SysConst.ADDFAIL);
		boolean res = false;	
			//上传文件
			if(documentFileName == null){//如果不上传附件
				dcm.setFilename("无");
	        }else{//如果上传附件
	        	String fileCode = getFileCode(documentFileName);
	            String dic=ServletActionContext.getServletContext().getRealPath("document");
	    		String path=dic+File.separator+fileCode;
	    		//保存文件
	    		try {
	    			IOUtils.copy(new FileInputStream(document), new FileOutputStream(new File(path)));
	    			dcm.setFilename(documentFileName);
	    			dcm.setFilecode(fileCode);
	    		} catch (FileNotFoundException e) {
	    			e.printStackTrace();
	    		} catch (IOException e) {
	    			e.printStackTrace();
	    		}
	        }
			QUser us = (QUser) session.get("login_users");
			QUser qu = userBiz.findUserByLname(us.getLname());
			dcm.setCreatetime(Quarter.getNowTime());
			dcm.setPeopleid(qu.getRname());
			res = documentBiz.add(dcm);
			if(res){
				tj.setMessage(SysConst.ADDSUCCESS);
				tj.setSuccess(true);
			}
			this.writeJSON(tj);
		}
	
public void filedown() throws IOException{
		
	    Document d = documentBiz.findById(dcm.getId());
		fileName = d.getFilename();
		
		
		HttpServletRequest request = ServletActionContext.getRequest();
		String userAgent = ((HttpServletRequest) request).getHeader("User-Agent");
		if (userAgent.contains("MSIE") || userAgent.contains("Trident")) {
			fileName = java.net.URLEncoder.encode(fileName, "UTF-8");
		}else if (userAgent.contains("Firefox")) {
			BASE64Encoder base64Encoder = new BASE64Encoder();
			fileName = "=?utf-8?B?"+ base64Encoder.encode(fileName.getBytes("utf-8")) + "?=";
		}
		else {
			// 非IE浏览器的处理：
			fileName = new String(fileName.getBytes("UTF-8"), "ISO-8859-1");
		}
		
		fileName = fileName.toString().trim();
		String dic=ServletActionContext.getServletContext().getRealPath("document/"+d.getFilecode());
		//response.setHeader("content-disposition", "attachment;fileName="+URLEncoder.encode(fileName,"UTF-8").replaceAll("\\+", "%20").replaceAll("%28", "\\(").replaceAll("%29", "\\)").replaceAll("%3B", ";").replaceAll("%40", "@").replaceAll("%23", "\\#").replaceAll("%26", "\\&").replaceAll("%2C","\\,"));
		response.setHeader("content-disposition", "attachment;fileName="+fileName.replaceAll("\\+", "%20").replaceAll("%28", "\\(").replaceAll("%29", "\\)").replaceAll("%3B", ";").replaceAll("%40", "@").replaceAll("%23", "\\#").replaceAll("%26", "\\&").replaceAll("%2C","\\,"));
		byte[] bytes=new byte[1024];
		int len=0;
		try {
			fileInputStream = new FileInputStream(dic);
			out=response.getOutputStream();
			while((len=fileInputStream.read(bytes))>0){
				out.write(bytes, 0, len);
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}finally{
			if(fileInputStream!=null){
				fileInputStream.close();
			}
			if(out!=null){
				out.close();
			}
		}
	}

//删除公告
	public void del(){
		try{
		    TempJson tj=new TempJson();
		    tj.setMessage(SysConst.DELFAIL);
		    
		    dcm = documentBiz.findById(dcm.getId());
		    //删除文件夹的文件
		    String dic = ServletActionContext.getServletContext().getRealPath("document/"+dcm.getFilecode());
		    File file = new File(dic);
		    if (file.isFile())
            file.delete();
		    boolean res = documentBiz.del(dcm);
		
		    if(res){
			    tj.setMessage(SysConst.DELSUCCESS);
			    tj.setSuccess(true);
		    }
		    this.writeJSON(tj);
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
}
